<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ë–ª–∏–∂–∞–π—à–∏–µ –∏–≥—Ä—ã</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/teams.css">
     <meta name="_csrf" content="${_csrf.token}">
      <meta name="_csrf_header" content="${_csrf.headerName}">
</head>
<body>
<!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ -->
<div class="profile-sidebar">
  
    <ul class="profile-nav">
        <li><a href="/"><i>üè†</i> –ì–ª–∞–≤–Ω–∞—è</a></li>
        <li><a href="/contacts"><i>üìû</i> –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞</a></li>
        <li><a href="/myteams"><i>üë•</i> –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã</a></li>
        <li><a href="/teams" class="active"><i>‚öΩ</i> –ë–ª–∏–∂–∞–π—à–∏–µ –∏–≥—Ä—ã</a></li>
        <li><a href="/my-courts"><i>üìç</i> –ú–æ–∏ –ø–ª–æ—â–∞–¥–∫–∏</a></li>
        <li><a href="/my-reviews"><i>‚úçÔ∏è</i> –ú–æ–∏ –æ—Ç–∑—ã–≤—ã</a></li>

        <li><a href="/logoutPage"><i>üö™</i> –í—ã–π—Ç–∏</a></li>
    </ul>
</div>

<!-- –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ -->
<div class="profile-content">
    <h1>–ë–ª–∏–∂–∞–π—à–∏–µ –∏–≥—Ä—ã</h1>


    <div class="main-content-container">
        <div class="games-container">
            <!-- –ö–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä -->
            <div class="games-grid">
                <#list games as game>
                <div class="game-card" data-game-id="${game.id}">
                <input type="hidden" class="game-id-input" value="${game.id}">


                    <h3>${game.name}</h3>
                    <p><strong>–°–æ–∑–¥–∞—Ç–µ–ª—å:</strong> ${game.creator}</p>
                    <p class="players"><strong>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</strong> ${game.players?size}/${game.amount}</p>
                    <p><strong>–ü–ª–æ—â–∞–¥–∫–∞:</strong></p>

                    <p><strong>–î–∞—Ç–∞:</strong> ${game.gameDate?string('dd.MM.yyyy')}</p>
                    <p><strong>–í—Ä–µ–º—è:</strong> ${game.gameTime?string('HH:mm')}</p>
                </div>
            </#list>

            <#if !games?? || games?size == 0>
            <div class="no-games-message">
                –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            </div>
        </#if>
    </div>
</div>

</div>
</div>
</div>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏–≥—Ä—ã -->
<div id="gameDetailsModal" class="modal">
  <!-- –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö -->
  <form id="joinTeamForm" method="post" action="/join-team" class="modal-content">
    <input type="hidden" id="modalGameId" name="gameId" required>
    <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}">

    <div class="modal-header">
      <span class="close-btn" id="closeModalBtn">&times;</span>
      <h2 id="modalGameTitle"></h2>
    </div>

    <div class="modal-body">
      <!-- –í—Å–µ –ø–æ–ª—è —Å–¥–µ–ª–∞–Ω—ã read-only -->
      <p><strong>–°–æ–∑–¥–∞—Ç–µ–ª—å:</strong> <span id="modalCreatorName"></span></p>
      <p><strong>–ö–æ–Ω—Ç–∞–∫—Ç:</strong> <span id="modalCreatorContact"></span></p>
      <p><strong>–ü–ª–æ—â–∞–¥–∫–∞:</strong> <span id="modalFieldName"></span></p>
      <p><strong>–ê–¥—Ä–µ—Å:</strong> <span id="modalFieldAddress"></span></p>
      <p><strong>–î–∞—Ç–∞:</strong><span id = "modalGameDateTime"></span></p>
      <p><strong>–í—Ä–µ–º—è:</strong></p>
      <p><strong>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</strong> <span id="modalPlayersCount"></span></p>

      <div class="participants-list">
        <!-- –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
      </div>

      <button type="submit" class="join-btn" id="joinGameBtn">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É</button>
    </div>
  </form>
</div>

<script>
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  let games = ${gamesJson?no_esc}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Freemarker
  const currentUserId = ${currentUserId!"null"}; // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ—à–ª–∞ –ª–∏ —É–∂–µ –¥–∞—Ç–∞ –∏–≥—Ä—ã
  function isGamePast(gameDate) {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–∞—Ç
    const gameDateObj = new Date(gameDate);
    return gameDateObj < today;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç–µ–ª—è
  async function loadCreatorData(creatorId, element) {
      if (!creatorId) return null;

      try {
          const csrfToken = document.querySelector('meta[name="_csrf"]')?.content;
          const csrfHeader = document.querySelector('meta[name="_csrf_header"]')?.content;

          if (!csrfToken || !csrfHeader) {
              throw new Error('CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }

          const formData = new URLSearchParams();
          formData.append('creator', creatorId);

          const response = await fetch('/getCreator', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/x-www-form-urlencoded',
                  [csrfHeader]: csrfToken
              },
              body: formData
          });

          if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç–µ–ª—è');

          return await response.json();
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è:', error);
          return null;
      }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∏
  async function loadFieldData(fieldId, element) {
      if (!fieldId) return null;

      try {
          const csrfToken = document.querySelector('meta[name="_csrf"]')?.content;
          const csrfHeader = document.querySelector('meta[name="_csrf_header"]')?.content;

          if (!csrfToken || !csrfHeader) {
              throw new Error('CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }

          const formData = new URLSearchParams();
          formData.append('id', fieldId);

          const response = await fetch('/get-field', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/x-www-form-urlencoded',
                  [csrfHeader]: csrfToken
              },
              body: formData
          });

          if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∏');

          return await response.json();
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–æ—â–∞–¥–∫–∏:', error);
          return null;
      }
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–≥—Ä
  function updateGameCards() {
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      document.querySelectorAll('.game-card').forEach(card => {
          const gameId = parseInt(card.dataset.gameId);
          const game = games.find(g => g.id === gameId);
          if (!game) return;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏–≥—Ä—ã
          const gameDate = new Date(game.gameDate);
          const isPast = gameDate < today;

          if (isPast) {
              // –î–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏–≥—Ä
              card.classList.add('past-game');
              card.innerHTML += '<div class="game-status">–°–æ—Å—Ç–æ—è–ª–∞—Å—å</div>';
              card.style.pointerEvents = 'none';
              card.style.opacity = '0.7';
          } else {
              // –î–ª—è –±—É–¥—É—â–∏—Ö –∏–≥—Ä
              const playersCountElement = card.querySelector('.players');
              if (playersCountElement) {
                  const playersCount = game.players ? game.players.length : 0;
                  const maxPlayers = game.amount || 0;
                  playersCountElement.textContent = '–£—á–∞—Å—Ç–Ω–∏–∫–∏: ' + playersCount + '/' + maxPlayers;
              }
          }
      });
  }

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  async function refreshGamesData() {
      try {
          const response = await fetch('/api/games');
          if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');

          games = await response.json();
          updateGameCards();
          return games;
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
          throw error;
      }
  }

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏–≥—Ä—ã
  async function openGameModal(game) {
    if (!game) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏–≥—Ä—ã
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const gameDate = new Date(game.gameDate);

    if (gameDate < today) {
        alert('–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å');
        return;
    }

    document.getElementById('modalGameId').value = game.id;
    document.getElementById('modalGameTitle').textContent = game.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    if (game.creatorId) {
        const creator = await loadCreatorData(game.creatorId, document.body);
        document.getElementById('modalCreatorName').textContent = game.creatorName || '–ù–µ —É–∫–∞–∑–∞–Ω';
        document.getElementById('modalCreatorContact').textContent = game.creatorContact || '–ù–µ —É–∫–∞–∑–∞–Ω';
    } else {
        document.getElementById('modalCreatorName').textContent = game.creatorName || '';
        document.getElementById('modalCreatorContact').textContent = game.creatorContact || '';
    }

   // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏
   if (game.fieldId) {
       // –ò—â–µ–º –ø–ª–æ—â–∞–¥–∫—É –≤ —Å–ø–∏—Å–∫–µ fields –ø–æ ID
       const field = fields.find(f => f.id == game.fieldId);

       if (field) {
           document.getElementById('modalFieldName').textContent = field.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
           document.getElementById('modalFieldAddress').textContent = field.address || '–ù–µ —É–∫–∞–∑–∞–Ω';
       } else {
           // –ï—Å–ª–∏ –ø–ª–æ—â–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ game
           document.getElementById('modalFieldName').textContent = game.fieldName || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
           document.getElementById('modalFieldAddress').textContent = game.fieldAddress || '–ù–µ —É–∫–∞–∑–∞–Ω';
       }
   } else {
       // –ï—Å–ª–∏ –Ω–µ—Ç fieldId, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ game
       document.getElementById('modalFieldName').textContent = game.fieldName || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
       document.getElementById('modalFieldAddress').textContent = game.fieldAddress || '–ù–µ —É–∫–∞–∑–∞–Ω';
   }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const formattedDate = game.gameDate ? new Date(game.gameDate).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    }) : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

    const formattedTime = game.gameTime || '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    document.getElementById('modalGameDateTime').textContent = formattedDate+formattedTime;

    document.getElementById('modalPlayersCount').textContent =
      (game.players ? game.players.length : 0) + '/' + game.amount;

    const participantsList = document.querySelector('.participants-list');
    participantsList.innerHTML = '<h4>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</h4>';

    if (game.players && game.players.length > 0) {
      game.players.forEach(function(player) {
        const participantElement = document.createElement('div');
        participantElement.className = 'participant ' + (player.isCreator ? 'creator' : '');

        var playerHtml = player.name;
        if (player.isCreator) {
          playerHtml += ' (—Å–æ–∑–¥–∞—Ç–µ–ª—å) <span class="contact-info">' + (player.contact || '') + '</span>';
        }
        participantElement.innerHTML = playerHtml;

        participantsList.appendChild(participantElement);
      });
    } else {
      participantsList.innerHTML += '<div class="no-participants">–í –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>';
    }

    const joinButton = document.getElementById('joinGameBtn');
    if (joinButton) {
      const isParticipant = game.players && game.players.some(function(p) { return p.id === currentUserId; });
      joinButton.disabled = isParticipant;
      joinButton.textContent = isParticipant ? '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã' : '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É';
    }

    document.getElementById('gameDetailsModal').style.display = 'block';
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  function initEventListeners() {
    // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä—ã (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)
    document.addEventListener('click', function(e) {
      const card = e.target.closest('.game-card');
      if (!card || card.classList.contains('past-game')) return;

      const gameId = parseInt(card.dataset.gameId);
      const game = games.find(g => g.id === gameId);
      if (game) {
        openGameModal(game);
      }
    });

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏
    var joinForm = document.getElementById('joinTeamForm');
    if (joinForm) {
      joinForm.addEventListener('submit', async function(e) {
        e.preventDefault();

        try {
          if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É?')) {
            return;
          }

          const gameId = document.getElementById('modalGameId').value;
          if (!gameId) throw new Error('–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏');

          const csrfToken = document.querySelector('meta[name="_csrf"]').content;
          const csrfHeader = document.querySelector('meta[name="_csrf_header"]').content;

          const formData = new URLSearchParams();
          formData.append('gameId', gameId);

          const response = await fetch('/join-team', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/x-www-form-urlencoded',
                  [csrfHeader]: csrfToken
              },
              body: formData
          });

          if (response.redirected) {
            window.location.href = response.url;
            return;
          }

          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
          }

          document.getElementById('joinGameBtn').disabled = true;
          document.getElementById('joinGameBtn').textContent = '–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!';

          await refreshGamesData();

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', error);
          alert(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É');
        }
      });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    var closeBtn = document.getElementById('closeModalBtn');
    if (closeBtn) {
      closeBtn.addEventListener('click', function() {
        document.getElementById('gameDetailsModal').style.display = 'none';
      });
    }

    // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    window.addEventListener('click', function(event) {
      if (event.target === document.getElementById('gameDetailsModal')) {
        document.getElementById('gameDetailsModal').style.display = 'none';
      }
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.addEventListener('DOMContentLoaded', function() {
    initEventListeners();
    updateGameCards();
  });
</script>

<style>
  .past-game {
    position: relative;
    opacity: 0.7;
    pointer-events: none;
  }

  .game-status {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: #f8d7da;
    color: #721c24;
    padding: 5px 10px;
    border-radius: 4px;
    font-weight: bold;
  }
</style>

</body>
</html>